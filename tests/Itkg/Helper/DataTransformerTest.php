<?php
namespace Itkg\Helper;

use Itkg\Helper\DataTransformer;
use Zend\Mail\Message;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-09-10 at 11:40:33.
 */
class DataTransformerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var DataTransformer
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new DataTransformer();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

        
    /**
     * @covers Itkg\Helper\DataTransformer::simplexml2array
     * 
     */
    public function testSimplexml2array()
    {
        $xmlstr ="<?xml version='1.0' standalone='yes'?>
            <movies year='2012'>
             <movie lang='fr'>
              <title>PHP: Behind the Parser</title>
              <plot standard='test'>
               So, this language. All is revealed in this thrilling horror spoof
               of a documentary.
              </plot>
              </movie>
            </movies>";
            $testXmlElement = new \SimpleXMLElement($xmlstr);
            $this->assertTrue(is_array($this->object->simplexml2array($testXmlElement)));
            $this->assertFalse(is_object($this->object->simplexml2array($testXmlElement)));
            
    }

    /**
     * @covers Itkg\Helper\DataTransformer::stringxmlToObject
     * 
     */
    public function testStringxmlToObject()
    {
       $xmlstr ="<?xml version='1.0' standalone='yes'?>
            <Message>
                <from>clement.guinet@businessdecisoin.com</from>
                <subject>PHP: Behind the Parser</subject>
                <bodytext>
                  So, this language. All is revealed in this thrilling horror spoof
                  of a documentary.
                </bodytext>
            </Message>";
       
            $sTagName = "Message";
            $aMapping = array("Message" => "Itkg\Mail\Client");
             
            $this->assertTrue(is_object($this->object->stringxmlToObject($xmlstr, $sTagName, $aMapping)));
            
            $this->assertNull($this->object->stringxmlToObject($xmlstr, $sTagName));
            
    }
    
    /**
     * @covers Itkg\Helper\DataTransformer::simplexmlToObject
     * 
     */
    public function testSimplexmlToObject()
    {
        $xmlstr ="<?xml version='1.0' standalone='yes'?>
            <Message property='main'>
                <from sex='male'>clement.guinet@businessdecisoin.com</from>
                <subject>PHP: Behind the Parser</subject>
                <bodytext>
                  So, this language. All is revealed in this thrilling horror spoof
                  of a documentary.
                </bodytext>
            </Message>";
       
            $sTagName = "<Message>";
            $aMapping = array("<Message>" => "Itkg\Mail\Client");
            $testXmlElement = new \SimpleXMLElement($xmlstr);
            $this->assertTrue(is_object($this->object->simplexmlToObject($testXmlElement, $sTagName, $aMapping)));
        
    }

    /**
     * @covers Itkg\Helper\DataTransformer::arrayToObject
     * 
     */
    public function testArrayToObject()
    {
        $aArray = array('test', array('test2', 'test3'));
        $this->assertTrue(is_object($this->object->arrayToObject($aArray)));
    }

    /**
     * @covers Itkg\Helper\DataTransformer::arrayIntoObject
     * 
     */
    public function testArrayIntoObject()
    {
       $aArrayMethods = array(
           'From' => 'clement.guinet@businessdecision.com',
           'To' => 'guinet.clement@businessdecision.com',
           'Subject' => 'mon sujet',
           'Body' => 'mon body',
       );
       
       $object = new Message();
       
       $this->assertTrue(is_object($this->object->arrayIntoObject($object, $aArrayMethods)));
       
    }

    /**
     * @covers Itkg\Helper\DataTransformer::trimData
     */
    public function testTrimData()
    {
        //Itkg de tableaux
        $aTestArrayWithSpace = array('First Data ', ' Second Data ');
        $aTestArrayWithoutSpace = array('First Data', 'Second Data');
        $this->assertEquals($aTestArrayWithoutSpace, $this->object->trimData($aTestArrayWithSpace));
        
        //Itkg d'objets
        $objectWithSpace = new Message();
        $objectWithSpace->addFrom(" clement.guinet@businessdecision.com");
        $objectWithSpace->addTo("guinet.clement@gmail.com ");
        
        //LE TEST TRIM DATA SUR OBJETS NE FONCTIONNE PAS avec Mail :  prendre une autre classe !!!!
        $objectWithoutSpace = new Message();
        $objectWithoutSpace->addFrom(" clement.guinet@businessdecision.com");
        $objectWithoutSpace->addTo("guinet.clement@gmail.com ");
        
        $this->assertEquals($objectWithoutSpace, $this->object->trimData($objectWithSpace));
    }
}